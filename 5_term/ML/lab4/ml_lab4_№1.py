# -*- coding: utf-8 -*-
"""ML lab4 №1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18zqA0SpL4O_3fRyASR0CSSlQ9ItAHYm4
"""

# 1
import seaborn as sb
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

# 1
sb.get_dataset_names()

# 2

# а) Импорт набора данных 'iris'
data = sb.load_dataset('iris')
data.head()

# б) Импорт набора данных 'tips' – чаевые
df = sb.load_dataset('tips')
df.head()

# 3
def sinplot(flip = 1):
  x = np.linspace(0, 14, 100)
  for i in range(1, 5):
    plt.plot(x, np.sin(x + i*.5)*(7 - i)*flip)
sinplot()
plt.show()

# 4

def sinplot(flip = 1):
  x = np.linspace(0, 14, 100)
  for i in range(1, 5):
    plt.plot(x, np.sin(x + i*.5)*(7 - i)*flip)
sb.set()
sinplot()
plt.show()

# добавилась серая сетка на заднем фоне

# 5

def sinplot(flip=1):
  x = np.linspace(0, 14, 100)
  for i in range(1, 5):
    plt.plot(x, np.sin(x + i*.5)*(7 - i)*flip)
sb.set_style("whitegrid")
sinplot()
plt.show()
# теперь квадраты белые, но границы квадратов стали серыми, а не белыми как в 4

# 6

def sinplot(flip=1):
  x = np.linspace(0, 14, 100)
  for i in range(1, 5):
    plt.plot(x, np.sin(x + i*.5)*(7 - i)*flip)
sb.set_style("white")
sinplot()
sb.despine()
plt.show()

# 7

sb.axes_style()
# стили

# 8

def sinplot(flip=1):
  x = np.linspace(0, 14, 100)
  for i in range(1, 5):
    plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)

sb.set_style("darkgrid", {'axes.axisbelow': False}) # Изменили здесь
sinplot()
sb.despine()
plt.show()

# 9

def sinplot(flip=1):
  x = np.linspace(0, 14, 100)
  for i in range(1, 5):
    plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)

sb.set_style("darkgrid", {'axes.axisbelow': True}) # Изменили здесь
sinplot()
sb.despine()
plt.show()

# границы сетки в 8 примере границы сетки были сверху графиков

# 10

current_palette = sb.color_palette()
sb.palplot(current_palette)
plt.show()

# отобразилось 10 цветов

# 11  а) Выведите рисунок последовательной палитры.
current_palette = sb.color_palette()
sb.palplot(sb.color_palette("Greens"))
plt.show()

#  б) Выберите другой цвет и приведите изображение последовательной палитры.
current_palette = sb.color_palette()
sb.palplot(sb.color_palette("Purples"))
plt.show()

# 12 а) Выведите рисунок расходящейся палитры.
current_palette = sb.color_palette()
sb.palplot(sb.color_palette("BrBG", 7))
plt.show()

# 12 б) Приведите рисунок расходящейся палитры с другим сочетанием цветов.
current_palette = sb.color_palette()
sb.palplot(sb.color_palette("PiYG", 7))
plt.show()

# 13

def sinplot(flip = 1):
  x = np.linspace(0, 14, 100)
  for i in range(1, 5):
    plt.plot(x, np.sin(x + i * .5) * (7 - i)*flip)

sb.set_style("white")
sb.set_palette("husl")
sinplot()
plt.show()

# 14

sb.set()
# Набор данных 'чаевые'
tips = sb.load_dataset('tips')
ax = sb.scatterplot(x = 'total_bill', y='tip', data = tips)
plt.show()

# в основном чем больше чек, тем выше чаевые
# если сумма чека оказывается от 10 до 20, то точно получают чаевые от 2 до 4

# 15

df = sb.load_dataset('iris')
sb.distplot(df['petal_length'], kde = False)
plt.show()

# кол-во ирисов в зависимости от длины лепестков

# 16

df = sb.load_dataset('iris')
sb.distplot(df['petal_length'], hist=False)
plt.show()

#  График плотности в зависимости от длины лепестков ириса

# 17 а) Прокомментируйте программный код и полученный рисунок.
df = sb.load_dataset('iris')
sb.distplot(df['petal_length'])
plt.show()
# График частоты и плотности в зависимости от длины лепестков ириса

# б) Сравните два рисунка а) и б).
df = sb.load_dataset('iris')
sb.distplot(df['petal_length'], hist_kws = {"alpha": 1})
plt.show()

# На рисунке б график частоты залит полностью и непрозрачен

# 18

df = sb.load_dataset('iris')
sb.jointplot(x = 'petal_length', y = 'petal_width', data = df)
plt.show()

# Есть связь между шириной и длиной лепестков

# 19

df = sb.load_dataset('iris')
sb.set_style("ticks")
sb.pairplot(df, hue = 'species', diag_kind = "kde", kind = "scatter", palette = "husl")
plt.show()

# 20
iris = sb.load_dataset("iris")
ax = sb.pairplot(iris)
plt.show()

# в 19 примере всё яркое и красочное, в 20 стандартно всё синее и вместо графиков присутствуют гистограммы

# 21

df = sb.load_dataset('iris')
sb.stripplot(x = "species", y = "petal_length", data = df, jitter = False)
plt.show()

# 22

df = sb.load_dataset('iris')
sb.stripplot(x = "species", y = "petal_length", data = df, jitter = True)
plt.show()

# 23

df = sb.load_dataset('iris')
sb.swarmplot(x = "species", y = "petal_length", data = df)
plt.show()

# 24

df = sb.load_dataset('iris')
sb. barplot(x = "species", y = "petal_length", data = df)
plt.show()

# 25  а) По тем же данным постройте коробчатую диаграмму
df = sb.load_dataset('iris')
sb. boxplot(x = "species", y = "petal_length", data = df)
plt.show()

# б) Постройте boxplot с другим расположением коробок
df = sb.load_dataset('iris')
sb.boxplot(data = df, orient = "h")
plt.show()

# 26

df = sb.load_dataset('tips')
sb.violinplot(x = "day", y = "total_bill", data=df)
plt.show()

# 27

df = sb.load_dataset('tips')
sb.violinplot(x = "day", y = "total_bill", hue = 'sex', data = df)
plt.show()

# В пятницу у женщин меньше всего сумма чека,
# но в основном у мужчин выше сумма чека в любой день недели

# 28  Построим гистограмму среднего числа выживших мужчин и
# женщин в каждом классе кают.
df = sb.load_dataset('titanic')
sb.barplot(x = "sex", y = "survived", hue = "class", data = df)
plt.show()

# 1) В каждом классе кают женщин спаслось больше чем мужчин
# 2) Люди из первого класса кают спаслось больше

# 29

df = sb.load_dataset('titanic')
sb.countplot(x="class", data=df, palette="Blues")
plt.show()

# Меньше всего спаслось людей из второго класса
# больше всего из третьего

# 30

df = sb.load_dataset('titanic')
sb.pointplot(x = "sex", y = "survived", hue = "class", data = df)
plt.show()

# Информация не изменилась

# 31  Построим regplot и затем lmplot по одним и тем же данным.
df = sb.load_dataset('tips')
sb.regplot(x = "total_bill", y = "tip", data = df)
sb.lmplot(x = "total_bill", y = "tip", data = df)
plt.show()

#  у lmplot нет верхней и правой границ рамки

# 32 Построим линейную регрессию, когда одна из переменных
# принимает дискретные значения.

df = sb.load_dataset('tips')
sb.lmplot(x = "size", y = "tip", data = df)
plt.show()

# 33

df = sb.load_dataset('anscombe')
sb.lmplot(x="x", y="y", data=df.query("dataset == 'I'"))
plt.show()

# Данных недостаточно чтобы понять, подходят ли они для модели линейной регрессии или нет

# 34

df = sb.load_dataset('anscombe')
sb.lmplot(x="x", y="y", data=df.query("dataset == 'II'"))
plt.show()

# а) Точки вообще не лежат практически на линии регрессии
# б) Большое
# в) отрицательная парабола